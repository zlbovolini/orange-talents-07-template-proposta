spring:
  application:
    name: ${NOME_DA_APLICACAO:Proposta API}
  datasource:
    url: jdbc:postgresql://${PROPOSTA_DB_HOSTNAME:localhost}:${PROPOSTA_DB_PORT:5400}/${PROPOSTA_DB_NAME:proposta_dev}
    username: ${PROPOSTA_DB_USERNAME:zup}
    password: ${PROPOSTA_DB_PASSWORD:zup}
    driver-class-name: org.postgresql.Driver
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    show_sql: true
    format_sql: true
    properties:
      javax:
        persistence:
          query:
            timeout: 50
  devtools:
    remote:
      secret: "secret"

  security:
    oauth2:
      resourceserver:
        jwt:
          # authorization server URI
          issuer-uri: ${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/propostas}
          # URI das chaves para validar a assinatura do token
          jwk-set-uri: ${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/propostas/protocol/openid-connect/certs}
server:
  port: ${SERVER_PORT:8080}
  error:
    include-stacktrace: never

feign:
  client:
    config:
      financeiros:
        read-timeout: 100
        connect-timeout: 100

management:
  endpoints:
    web:
      cors:
        allowed-origins: http://127.0.0.1
        allowed-methods: GET
      exposure:
        include: info, health, prometheus
    prometheus:
      enabled: true
  metrics:
    tags:
      aplicacao: ${NOME_DA_APLICACAO:Proposta API}
      ambiente: ${AMBIENTE:desenvolvimento}

opentracing:
  jaeger:
    enabled: ${JAEGER_ENABLED:true}
    service-name: ${spring.application.name}
    http-sender:
      url: ${JAEGER_ENDPOINT:http://localhost:14268/api/traces}
    probabilistic-sampler:
      sampling-rate: ${JAEGER_SAMPLER:1}

scheduled-task:
  consulta-existe-cartao:
    periodicidade:
      executa-operacao: ${PERIODICIDADE_CONSULTA_EXISTE_CARTAO:10000}

# Microservices
solicitacao:
  host: ${FINANCEIROS_URL:http://localhost:9999/api/solicitacao}
cartoes:
  host: ${CARTOES_URL:http://localhost:8888/api/cartoes}